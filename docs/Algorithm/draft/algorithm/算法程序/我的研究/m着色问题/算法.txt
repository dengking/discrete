m着色问题的递归版本
M_COLOR(G)
{
solutions<-
为解向量x分配存储空间
GRAPHCOLOR(G,1)
return solutions
}

GRAPHCOLOR(K)
{
   if(k>n)
    then solutions=solutions
	return
   for color<- 1 to m  //对当前第k个结点，逐一检测三种可能的着色
    do Xk<-color
     if    1<=i<=k                    //部分合法
	    then GRAPHCOLOR(k+1）//只有在上一层合法的条件下才进入下一层搜索，负责就不进入下一层。对当前结点尝试其它的颜色。
}

总结：画出搜索树，对于理解此段代码大有帮助。上述算法采用的是递归算法，并且是尾递归，因此非常容易消除。

m着色问题的迭代版本
m_COLOR(G,m)
{
  solutions<-
  allocate x and for 1=<i<=n set x(i) as 0
  k<-1   //从第一层开始搜索
  while k>=1
     do  while x(k)<m
        do x(k)<-x(k)+1	 
		 if                                     //部分合法
		 then if k=n                            //完整解，输出
		      then solutions<-solutions
			         exit this while loop
		      else k<-k+1                      //合法但不完整，还需要进一步探索
      x(k)<-0
	  k<-k-1
  return solutions
}  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  