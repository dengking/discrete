/* 
 * File:   test.cpp
 * Author: 徐子珊
 *
 * Created on 2008年11月15日, 下午6:58
 */
#include "../Utility/general.h"
//#include "threecolor.h"
//#include "nqueens.h"
//#include "subsetsum.h"
//#include "hamilton.h"
#include "tsp.h"
//#include "caves.h"
#include <iostream>
using namespace std;
int main(int argc, char** argv) {
//    int a[25]={0,1,1,0,0,
//               1,0,0,1,1,
//               1,0,0,1,1,
//               0,1,1,0,1,
//               0,1,1,1,0},
//        b[]={1,2,3,4},
//        c[]={0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
//            1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//            0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
//            0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
//            0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
//            0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
//            0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,
//            0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,
//            0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
//            0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,
//            0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,
//            0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,
//            0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,
//            1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
//            0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,
//            0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,
//            0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,
//            0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,
//            0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,
//            1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0};
    double d[]={0,3,1,5,8,
                3,0,6,7,9,
                1,6,0,4,2,
                5,7,4,0,3,
                8,9,2,3,0};
    tsp *p=new tsp(d,5);
    optBacktrack(p);
    delete p;
//    CombineProblem<int,int> *p;
//    SpacialProblem<int> *q=new SubsetSum(b,4,6);
//    p=new NQueens(4);
//    backtrack(p);
//    p=new MColor(a,5,3);
//    backtrack(p);
//    p=new SubsetSum(b,4,6);
//    backtrack(q);
//    p=new Hamilton(c,20,5);
//    backtrack(p);
//    float a[]={0,3,5,
//               0,0,0,
//               0,0,0};
//    tribe *t=new tribe(a,3,3);
//    caves(t,1);
//    cout<<t->max<<endl;
    return (EXIT_SUCCESS);
}
